Database indexes

A database index is a data structure that improves the speed of data retrieval operations on a database table at the cost of additional writes
and storage space to maintain the index data structure. Indexes are used to quickly locate data without having to search every row in a
database table every time a database table is accessed. In other words, an index is a copy of select columns of data from a table that can
be searched very efficiently that also includes a low-level disk block address or direct link to the complete row of data it was copied from.
Some databases extend the power of indexing by letting developers create indices on functions or expressions.

Indexing methods

	- Non-clustered: The data is present in arbitrary /произволен/ order, but the logical ordering is specified by the index. The data rows may
	  be spread throughout the table regardless of the value of the indexed column or expression. The non-clustered index tree contains the
	  index keys in sorted order, with the leaf level of the index containing the pointer to the record. There can be more than one non-clustered
	  index on a database table.
	
	- Clustered: Clustering alters the data block into a certain distinct order to match the index, resulting in the row data being stored in order.
	  Clustered indices can greatly increase overall speed of retrieval, but usually only where the data is accessed sequentially in the same or
	  reverse order of the clustered index, or when a range of items is selected. Only one clustered index can be created on a given database table.
	
	- Cluster: When multiple databases and multiple tables are joined, it's referred to as a cluster (different than the clustered index described
	  above). The records for the tables sharing the value of a cluster key shall be stored together in the same or nearby data blocks. This may
	  improve the joins of these tables on the cluster key, since the matching records are stored together and less I/O is required to locate them.
	  The cluster configuration defines the data layout in the tables that are parts of the cluster. A cluster can be keyed with a B-Tree index or a
	  hash table. The data block where the table record is stored is defined by the value of the cluster key.A cluster is a group of items.
	
B-Tree

A B-tree is a tree data structure that keeps data sorted and allows searches, sequential access, insertions, and deletions in logarithmic time. The
B-tree is a generalization of a binary search tree in that a node can have more than two children. Unlike self-balancing binary search trees, the
B-tree is optimized for systems that read and write large blocks of data. B-trees are a good example of a data structure for external memory. It is
commonly used in databases and filesystems.

Column-store index

A columnstore index is a technology for storing, retrieving and managing data by using a columnar data format, called a columnstore. Columnstore
indexes in the SQL Server Database Engine can be used to significantly speed-up the processing time of common data warehousing queries.
Typical data warehousing workloads involve summarizing large amounts of data. The techniques typically used in data warehousing and decision
support systems to improve performance are pre-computed summary tables, indexed views, OLAP cubes, and so on.
The key characteristics of SQL Server column store technology are as follows:
	- columnar data format;
	- faster query results;
	- key columns;
	- clustered index key;
	- partitioning;
	- record Size;
	- query processing;
	- table cannot be updated.

Full-text search index
	
Full-text Search lets users and applications run full-text queries against character-based data in SQL Server tables. Before you can run full-text queries
on a table, the database administrator must create a full-text index on the table. The full-text index includes one or more character-based columns in the
table. These columns can have any of the following data types: char, varchar, nchar, nvarchar, text, ntext, image, xml, or varbinary(max) and FILESTREAM.
Each full-text index indexes one or more columns from the table, and each column can use a specific language. After columns have been added to a
full-text index, users and applications can run full-text queries on the text in the columns. These queries can search for any of the following:
	- one or more specific words or phrases;
	- a word or a phrase where the words begin with specified text;
	- inflectional forms of a specific word;
	- a word or phrase close to another word or phrase;
	- synonymous forms of a specific word;
	- words or phrases using weighted values.
	
Spatial index

A spatial index is defined on a table column that contains spatial data (a spatial column). The support of spatial data includes support for a planar spatial
data type, geometry, which supports geometric data - points, lines, and polygons - within a Euclidean coordinate system. The geography data type
represents geographic objects on an area on the Earth's surface, such as a spread of land. A spatial index on a geography column maps the geographic
data to a two-dimensional space. Each spatial index refers to a finite space. For example, an index for a geometry column refers to a user-specified
rectangular area on a plane. Spatial indexes are built using B-trees, which means that the indexes must represent the 2-dimensional spatial data in the
linear order of B-trees.